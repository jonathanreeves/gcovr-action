name: Gcovr Action
description: Generate code coverage report for C++ project using gcovr
author: Alfi Maulana
branding:
  color: green
  icon: check-circle
inputs:
  root:
    description: The root directory of your source files
    required: false
  gcov-executable:
    description: Use a particular gcov executable
    required: false
  exclude:
    description: Exclude source files that match this filter
    required: false
  fail-under-line:
    description: Fail if the total line coverage is less than this value
    required: false
  coveralls-out:
    description: Output file of generated Coveralls API coverage report
    required: false
  coveralls-send:
    description: Send Coveralls API coverage report to it's endpoint (true/false)
    required: false
    default: false
  coveralls-repo-token:
    description: Required for sending Coveralls API coverage report successfully
    required: false
runs:
  using: composite
  steps:
    - name: Check if gcovr is installed
      shell: bash
      run: |
        if ! command -v gcovr &> /dev/null; then
          echo "gcovr could not be found, installing..."
          pip install gcovr
        fi

    - name: Process inputs
      shell: bash
      run: |
        if [ -n '${{ inputs.root }}' ]; then
          ARGS="$ARGS --root '${{ inputs.root }}'"
        fi
        if [ -n '${{ inputs.gcov-executable }}' ]; then
          ARGS="$ARGS --gcov-executable '${{ inputs.gcov-executable }}'"
        fi
        if [ -n '${{ inputs.exclude }}' ]; then
          ARGS="$ARGS --exclude '${{ inputs.exclude }}'"
        fi
        if [ -n '${{ inputs.fail-under-line }}' ]; then
          ARGS="$ARGS --fail-under-line '${{ inputs.fail-under-line }}'"
        fi
        if [ -n '${{ inputs.coveralls-out }}' ]; then
          COVERALLS_OUT='${{ inputs.coveralls-out }}'
        elif [ '${{ inputs.coveralls-send }}' = 'true' ]; then
          COVERALLS_OUT='/tmp/coveralls.json'
        fi
        if [ -n "$COVERALLS_OUT" ]; then
          ARGS="$ARGS --coveralls $COVERALLS_OUT"
        fi
        echo "GCOVR_ARGS=$ARGS" >> $GITHUB_ENV
        echo "COVERALLS_OUT=$COVERALLS_OUT" >> $GITHUB_ENV

    - name: Check if LLVM coverage is installed
      if: contains(inputs.gcov-executable, 'llvm-cov')
      shell: bash
      run: |
        if ! command -v llvm-cov &> /dev/null; then
          echo "llvm-cov could not be found, installing..."
          sudo apt-get install -y llvm
        fi

    - name: Generate code coverage report using gcovr
      shell: bash
      env:
        COVERALLS_REPO_TOKEN: ${{ inputs.coveralls-repo-token }}
      run: gcovr ${{ env.GCOVR_ARGS }}

    - name: Send code coverage report to Coveralls
      if: ${{ inputs.coveralls-send == 'true' }}
      shell: bash
      run: curl -v -F json_file=@${{ env.COVERALLS_OUT }} https://coveralls.io/api/v1/jobs
